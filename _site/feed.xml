<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-07-23T20:48:54-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">huhsu1</title><subtitle>Welcome to SungWan&apos;s website. I&apos;ve uploaded some projects so you can see easier.</subtitle><entry><title type="html">Paper Marbling</title><link href="http://localhost:4000/2024/07/23/Paper-Marbling.html" rel="alternate" type="text/html" title="Paper Marbling" /><published>2024-07-23T00:00:00-07:00</published><updated>2024-07-23T00:00:00-07:00</updated><id>http://localhost:4000/2024/07/23/Paper-Marbling</id><content type="html" xml:base="http://localhost:4000/2024/07/23/Paper-Marbling.html"><![CDATA[Paper Marbling. <br>
Right click to drop paint onto canvas.
The paint drop was from this <a
href="https://people.csail.mit.edu/jaffer/Marbling/Dropping-Paint">website</a>. <br>
The combing is done by left clicking and dragging. <br>
The combing calculation is from this <a
href="https://people.csail.mit.edu/jaffer/Marbling/stroke.pdf">paper</a>. <br>
I tweaked a couple calculations, like x = xb, y = (P-B) x N to get rid of unnecessary
calculations. <br>
Currently, everything is done on CPU. After making many circles, the latency starts to be
noticible.
<canvas id="canvas" width=4800 height=4800 style="border: 1px solid black"></canvas>
<script src="http://localhost:4000/scripts/papermarbling/papermarbling.js"> </script>]]></content><author><name></name></author><summary type="html"><![CDATA[Paper Marbling. Right click to drop paint onto canvas. The paint drop was from this website. The combing is done by left clicking and dragging. The combing calculation is from this paper. I tweaked a couple calculations, like x = xb, y = (P-B) x N to get rid of unnecessary calculations. Currently, everything is done on CPU. After making many circles, the latency starts to be noticible.]]></summary></entry><entry><title type="html">Implant Classifier</title><link href="http://localhost:4000/2024/07/17/Implant-Classifier.html" rel="alternate" type="text/html" title="Implant Classifier" /><published>2024-07-17T00:00:00-07:00</published><updated>2024-07-17T00:00:00-07:00</updated><id>http://localhost:4000/2024/07/17/Implant-Classifier</id><content type="html" xml:base="http://localhost:4000/2024/07/17/Implant-Classifier.html"><![CDATA[<style>
 /* Style the button that is used to open and close the collapsible content */
.collapsible {
  background-color: #eee;
  color: #444;
  cursor: pointer;
  padding: 18px;
  width: 100%;
  border: none;
  text-align: left;
  outline: none;
  font-size: 15px;
}

/* Add a background color to the button if it is clicked on (add the .active class with JS), and when you move the mouse over it (hover) */
.active, .collapsible:hover {
  background-color: #ccc;
}

/* Style the collapsible content. Note: hidden by default */
.content {
  padding: 0 18px;
  max-height: 0;
  overflow: hidden;
  background-color: #f1f1f1;
  transition: max-height 0.2s ease-out;
}
#image {
    display: block;
}
#imageHolder {
    display: none;
}
</style>

<p>
This model takes cropped photos of either Panoramic or Periapical x-rays
This model can classify 42 korean implants with 93% accuracy.
</p>

<button class="collapsible">Supported Implant Models</button>
<div class="content">
    <p id="implantlist">
    This shouldn't be showing up
    </p>
</div>

<label> Image File: </label>
<input type="file" id="imageLoader" name="imageLoader"/>
<button id="example">Example</button>

<canvas id="image"> </canvas>

<canvas id="imageHolder"></canvas>

<p id="output">
</p>

<script type="module" src="http://localhost:4000/scripts/implantclassifier/implantclassifier.js"> </script>


<button class="collapsible">How Did I Do This?</button>
<div class="content">
    First, here is the <a href="https://www.audleydentalsolutions.co.uk/assets/img/Dental-Implant-Safety-3.jpg">
    example link</a> I found on google search. I cropped using my <a
    href="https://huhsu1.github.io/2024/07/16/Image-Cropper.html">Image Cropper</a>.
    <p>
    The project is largely divided into 3 parts: choose a model, shape the input, put it online.
    <br>
    <b> 1. Choose a model.</b> <br>
    I thought that I probably won't be able to do better than what's already out there. So, I
    chose <a href="https://github.com/pytorch/vision/blob/main/torchvision/models/inception.py">
    Inception_v3</a> that is on pytorch github. I took the code and trained the model myself to
    have the model output only the desired classes. <br>
    <b> 2. Shape the input. </b> <br>
    To train the model myself, I had to create a dataset and a dataloader class to feed the model
    images. <br>
    To make the dataset, I used the xlsx file that came with the data, so I imported xlsx file
    into pandas dataframe, and manipulated the columns to hold directories to the pictures. I
    created a dictionary using unique implant models, which came out to 42 models. To get the item
    from the dataset, I open the image, transform the image to 1x3x299x299 that Inception_v3
    requires, and output the image and index of that model in the dictionary. So, the
    dataset.__getitem__ returns input and it's classification in number. <br>
    The dataloader was just made by the dataloader init using dataset. There were some
    complications from shuffling due to the image dims, but overall, the init did the job. <br>
    <b> 3. Put it online </b> <br>
    Having done the previous steps, this one was relatively easier. This part is in this
    page's source code, or my <a
    href="https://github.com/huhsu1/huhsu1.github.io/blob/main/scripts/implantclassifier/implantclassifier.js">github
    page</a>. <br>
    I first looked into TensorFlowJS, but converting PyTorch .pt file to TF .pb file used an
    outdated <a href="https://github.com/gmalivenko/pytorch2keras">pytorch2keras</a> that required
    fidgeting the files to make it work due to onnx optimizer now being a separate item from
    onnx. <br>
    While looking into this, I realized that onnx has onnxruntime-web that can run ML on the
    browser. It seemed that it was up to date, fast, and entirely client sided, so I decided to
    use onnxruntime-web. <br>
    The only way to access image data without using external libraries seemed like opening on
    canvas and getting the image data, so I used canvas to open image. Since I can set the
    canvas size, I made canvas into 299x299 pixels to transform the data. I then just needed to
    convert flattened RGBA image data to 3x299x299 Float32Array that onnx takes as input, and run
    inference. <br>
    The inference takes roughly 300 - 800ms even on phone.
    </p>
</div>]]></content><author><name></name></author><summary type="html"><![CDATA[/* Style the button that is used to open and close the collapsible content */ .collapsible { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; }]]></summary></entry><entry><title type="html">ImageCropper</title><link href="http://localhost:4000/2024/07/16/Image-Cropper.html" rel="alternate" type="text/html" title="ImageCropper" /><published>2024-07-16T00:00:00-07:00</published><updated>2024-07-16T00:00:00-07:00</updated><id>http://localhost:4000/2024/07/16/Image-Cropper</id><content type="html" xml:base="http://localhost:4000/2024/07/16/Image-Cropper.html"><![CDATA[<style>
button {
    cursor: pointer;
    outline: 0;
    color: #fff;
    background-color: #0d6efd;
    border-color: #0d6efd;
    display: inline-block;
    font-weight: 400;
    line-height: 1.5;
    text-align: center;
    border: 1px solid transparent;
    padding: 6px 12px;
    font-size: 16px;
    border-radius: .25rem;
    transition: color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;
    :hover {
        color: #fff;
        background-color: #0b5ed7;
        border-color: #0a58ca;
    }
}
#cancel {
    background-color: transparent;
    font-size: 1rem;
    border-radius: .25rem;
    transition: color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;
    color: #0d6efd;
    border-color: #0d6efd;
}
#canvas {
    touch-action: none;
}
.modal {
    background-color: rgba(0,0,0,0.4); /* Transparent dimmed overlay */
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: table;
}

.modal.hidden {
    display: none;
}

.modal .container {
    display: table-cell;
    text-align: center;
    vertical-align: middle;
    max-width: 80vw;
    max-height: 80vh;
}

.modal .body {
    display: block;
    background-color: white;
    padding: 10px;
    text-align: center;
    position: relative;
    margin-left: auto;
    margin-right: auto;
    max-width: 80vw;
}
.modal .body #preview {
    display: block;
    margin-left: auto;
    margin-right: auto;
}
.modal .body #buttonblock {
    margin-top: 10px;
    display: table;
    width: 100%;
    text-align: right;
}
.modal .body #download {
    display: table-cell;
    margin-right: 10px;
}
.modal .body #cancel {
    display: table-cell;
}
</style>

<!--
The image recreation from
https://stackoverflow.com/questions/10906734/how-to-upload-image-into-html5-canvas
-->
<label> Image Input: </label>
<input type="file" id="imageLoader"/>

<div id="modal" class="modal hidden">
    <div id="container" class="container">
        <div class="body">
            <h3>Preview</h3>
            <canvas id="preview" width=400 height=400 style="border: 1px solid black"></canvas>
            <div id="buttonblock">
                <button id="download">Download</button>
                <button id="cancel">Cancel</button>
            </div>
        </div>
    </div>
</div>

<canvas id="canvas" width=4800 height=4800 style="border: 1px solid black"></canvas>
<button id="crop">Crop</button>
<script src="http://localhost:4000/scripts/imagecropper/imagecropper.js"> </script>]]></content><author><name></name></author><summary type="html"><![CDATA[button { cursor: pointer; outline: 0; color: #fff; background-color: #0d6efd; border-color: #0d6efd; display: inline-block; font-weight: 400; line-height: 1.5; text-align: center; border: 1px solid transparent; padding: 6px 12px; font-size: 16px; border-radius: .25rem; transition: color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out; :hover { color: #fff; background-color: #0b5ed7; border-color: #0a58ca; } } #cancel { background-color: transparent; font-size: 1rem; border-radius: .25rem; transition: color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out; color: #0d6efd; border-color: #0d6efd; } #canvas { touch-action: none; } .modal { background-color: rgba(0,0,0,0.4); /* Transparent dimmed overlay */ position: fixed; top: 0; left: 0; width: 100%; height: 100%; display: table; }]]></summary></entry><entry><title type="html">MineSweeper</title><link href="http://localhost:4000/2024/07/15/Mine-Sweeper.html" rel="alternate" type="text/html" title="MineSweeper" /><published>2024-07-15T00:00:00-07:00</published><updated>2024-07-15T00:00:00-07:00</updated><id>http://localhost:4000/2024/07/15/Mine-Sweeper</id><content type="html" xml:base="http://localhost:4000/2024/07/15/Mine-Sweeper.html"><![CDATA[<p>Since I didn't have internet access during my time in the military, I often wrote minesweeper
on computers that I would use often to play when there is downtime. Here is a simple one
similar to what I would write in the military to celebrate the website launch. </p>


<canvas id="canvas" width="400" height="400"></canvas>
<script src="http://localhost:4000/scripts/minesweeper/minesweeper.js"> </script>

<p> For those of you who might need a refresher: <br>
The goal of the game is to reveal all tiles that don't contain the mines.<br>
<br>
You can left click to open tiles you think is safe. <br>
The numbers tell you how many mines are in a 3x3 square around the number. <br>
So, if the number says 1, there is only 1 mine in a 3x3 square. <br>
<br>
If you think there is a mine in a square, right click. It will put a flag down. <br>
You can right click a flag to remove the flag. <br>
Flag makes it so that you can't left click that square, to prevent you from accidentally
clicking it. <br>
<br>
You can double click an open tile to click a 3x3 square around the number. <br>
If you have all the mines around that tile flagged, use this feature to click less.

</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Since I didn't have internet access during my time in the military, I often wrote minesweeper on computers that I would use often to play when there is downtime. Here is a simple one similar to what I would write in the military to celebrate the website launch.]]></summary></entry></feed>